#!/bin/bash

## sarplot.sh 
## A hack to plot various system resource information from sar using gnuplot
##
## Added interoperability and some cleanup by Martin Schmitt
## Based on a script by Hereward Cooper and James Hannah

usage="Usage: $0 [-m METRIC|?] [-d DAY] [-w]"
metric="cpu"
sadate=$(printf "%.2i" $(date +%e))
while getopts ":wm:d:" options
do
	case $options in
		m ) 
			metric=$OPTARG
		;;
		d ) 
			sadate=$(printf "%.2i" ${OPTARG#0}) 
			#  ${OPTARG#0} removes trailing zero (see below).
		;;
		w ) 
			# Walk 7 days back in history.
			walk_history=true 
		;;
		: ) 
			echo "Missing parameter to option: -$OPTARG"
			echo $usage
			exit 1
		;;
		\? ) 
			echo $usage
			exit 1
		;;
		* ) 
			echo $usage
			exit 1
		;;
	esac
done

## Start off doing some checks for required programs
if [ ! -f /usr/bin/gnuplot ]
then
        echo "CRITICAL: gnuplot missing!"
        exit 1;
fi

if [ ! -f /usr/bin/sadf ]
then
        echo "CRITICAL: sar missing!"
        exit 1;
fi

# Locate historical sysstat data
if [ -d /var/log/sa ]
then
	saprefix="/var/log/sa/sa"
elif [ -d /var/log/sysstat ]
then
	saprefix="/var/log/sysstat/sa"
else
	echo "WARNING: Historical sysstat data not locatable."
fi

# Check if I have an sa file for the requested $sadate
if [ ! -e $saprefix$sadate ]
then
	echo "CRITICAL: No sa file for date: $sadate (Should have been: $saprefix$sadate)"
	exit 1
fi

# Detect version of sar
sarversion=11
found_version=$(sar -V 2>&1 | awk '/sysstat version/{printf "%i\n", $NF}') 
full_version=$(sar -V 2>&1 | awk '/sysstat version/{printf "%s\n", $NF}') 
case $found_version in 
	10|11)
		;;
	7|9)
		sarversion=$found_version
		;;
	*)
		echo "WARNING: Sysstat major version is $found_version."
		echo "WARNING: This script is untested with this version of sysstat."
		echo "WARNING: Proceeding anyway, assuming version 11. Good luck!"
		echo ""
		;;
esac

# Check whether sadf needs the -T option for displaying 
# seconds since the epoch:
if [ $sarversion -ge 10 ]
then
	# sadf <10.0 seems to default to epoch seconds in output
	# sadf 10.0 introduced -T, sadf 10.1.1 renamed -T to -U. U MAD BRO?
	sadf_seconds=-U
	if [[ $full_version =~ ^10\.0 ]]
	then
		sadf_seconds=-T
	fi
fi

#####################################################
## Next Define some of the graphs you want to plot ##
## metric = the flag to pass sar                   ##
## field = the coloumn in the output to plot       ##
## title = human readable version of the field     ##
#####################################################

# Swap Usage
if [[ $metric == "swap" ]]
then
	# sar < 8  uses -r for swap (RHEL 5)
	# sar >= 9 uses -S          (RHEL 6, Deb 6+7)
	# sar == 8 no idea
	# As I have no idea about sar ==8, I'll just try -S
	# and see if it fails:
	swapopt='-S'
	sar -S >/dev/null 2>&1 || swapopt='-r'
        sar $swapopt | grep swpused >/dev/null 2>&1 
	if [ $? -eq 1 ]
	then
		echo "No Swap Detected"
		exit 1
	fi
        saropt=$swapopt
        field="%swpused"
        title="% Swap Usage"

# 1 Minute Load Average
elif [[ $metric == "load" ]]
then
        saropt="-q"
        field="ldavg-15"
        title="15 Minute Load Average"

# Disk Read IO
elif [[ $metric == "io" ]]
then
        saropt="-b"
        field="rtps"
        title="Read Requests per Second"

# Disk Write IO
elif [[ $metric == "iow" ]]
then
        saropt="-b"
        field="wtps"
        title="Write Requests per Second"

# Network Inbound
elif [[ $metric == "netin" ]]
then
        saropt="-n DEV "
        field="eth0.*rxbyt"
        title="Byte/s received on eth0"
	# Never versions of sar output kbytes
	if [ $sarversion -ge 9 ]
	then
		field="eth0.*rxkB"
		title="kByte/s received on eth0"
	fi

# Network Outbound
elif [[ $metric == "netout" ]]
then
        saropt="-n DEV "
        field="eth0.*txbyt"
        title="Byte/s sent on eth0"
	# Never versions of sar output kbytes
	if [ $sarversion -ge 9 ]
	then
		field="eth0.*txkB"
		title="kByte/s sent on eth0"
	fi

# Context Switches
elif [[ $metric == "ctx" ]]
then
        saropt="-w"
        field="cswch"
        title="Context switches/second"

# IOWait
elif [[ $metric == "iowait" ]]
then
 	saropt="-u"
	field="iowait"
	title="% CPU spent waiting for I/O"


# Failback to CPU %idle if nothing defined
elif [[ $metric == "cpu" || $# -eq 0 ]]
then
        saropt="-u"
        field="%idle"
        title="CPU %Idle"
else
        echo "Specify one metric of:"
	echo ""
	echo "cpu    CPU idle percentage"
	echo "load   Load average"
	echo "swap   Swap utilization"
	echo "netin  Bytes or kilobytes received per second"
	echo "netout Bytes or kilobytes sent per second"
	echo "ctx    Context switches per second"
	echo "iowait % CPU spent waiting for I/O"
	echo "io     I/O read requests per second"
	echo "iow    I/O write requests per second"
	echo ""
        exit 1
fi

############################################################
## This is where things usually start to go really wrong: ##
############################################################

TMPFILE=`mktemp /tmp/sarplot.XXXXXXXXXX`

# This is the data for the specified startdate
# Order of sadf output in the tempfile does not matter, 
# as lines are indexed by the seconds column
/usr/bin/sadf $sadf_seconds $saprefix$sadate -- $saropt \
	| awk "/$field/ {print \$3,\$6}" >> $TMPFILE

if [ ! -z $walk_history ]
then
	# Go back in history up to 6 days before the specified startdate
	# Break the while loop when $sa_seen is >=6 or when sa_tried >= 10
	sa_seen=0
	sa_tried=0
	while true
	do
		# Step back one day in history
		# Remove trailing zero to avoid recognition as octal number
		sadate=${sadate#0}      # (see below)
		let sadate--
		# Increment number of attempts
		let sa_tried++
		# Roll over backward to previous month if needed
		if [ $sadate -lt 1 ]
		then
			sadate=31
		fi
		# Pad with zero again
		# #0 removes padding zeroes on the input side, so the arg
		# doesn't look as if it's octal.
		# http://stackoverflow.com/a/8078505/263310
		sadate=$(printf "%.2i" ${sadate#0})
		if [ -e $saprefix$sadate ]
		then
			# A file exists
			let sa_seen++
			/usr/bin/sadf $sadf_seconds $saprefix$sadate -- $saropt \
				| awk "/$field/ {print \$3,\$6}" >> $TMPFILE
		else
			# Skip if no sa file found
			echo "INFO: $saprefix$sadate not found - Probably month with <31 days or too old."
		fi
		#echo seen=$sa_seen tried=$sa_tried last_seen=$sadate
		# Break the loop if I've seen enough files
		if [ $sa_seen -ge 6 ]
		then
			# Success
			break
		fi
		# Break the loop if I've looked for too many files
		if [ $sa_tried -ge 10 ]
		then
			echo "INFO: Giving up looking for older files."
			break
		fi
	done
fi

# Now plot the data from the tempfile in gnuplot
cat <<End | gnuplot
set terminal dumb;
set title '$title';
set xdata time;
set timefmt '%s';
set format x "%d.\n%Hh";
plot '$TMPFILE' using 1:2 with line notitle;
End
rm -f $TMPFILE
